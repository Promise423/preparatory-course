
* 学习路线

  #+begin_src plantuml :file ./img/mind-map.svg
    @startmindmap
    ,* 预备课必备知识
    ,** 命令行操作
    ,*** linux文件和目录
    ,**** 文件和文件夹操作
    ,**** 变更工作目录
    ,*** 命令行快捷键
    ,**** 如何让你的操作更快捷
    ,** 笔记
    ,*** markdown语法
    ,** 软件管理
    ,*** brew
    ,** git
    ,*** github创建项目
    ,*** git项目管理
    ,**** init
    ,**** clone
    ,**** add
    ,**** commit
    ,**** push
    left side
    ,** 核心工具
    ,*** 终端
    ,**** terminal
    ,**** iTerm
    ,*** 览器
    ,**** chrome
    ,*** 编辑器
    ,**** 在编辑器里可用键盘完成所有操作（少用鼠标和触摸板）
    ,** 怎么问问题
    ,*** 多用google，少用百度
    @endmindmap
  #+end_src

  #+RESULTS:
  [[file:./img/mind-map.svg]]

* 预备课必备知识
  [[https://wiki.banyuan.club/pages/viewpage.action?pageId=3047612][半圆的wiki参考]]

  对同学们的要求：
  #+begin_quote
  *1. 不懂就问*

  *2. 自己在电脑上操作的每条命令，每个动作都要明白有什么样的效果*
  #+end_quote
  
** 命令行操作
   #+begin_quote
   *重要*

   使用 ~Tab~ 键可以进行补全，加快你的操作。
   #+end_quote
*** linux文件和目录
    
    [[http://cn.linux.vbird.org/linux_basic/0210filepermission.php][文件权限与目录配置]]
    
    [[http://cn.linux.vbird.org/linux_basic/0220filemanager.php][文件与目录管理]]

    1. Home目录是什么？
    2. ~.~ 和 ~..~ 以及 \tilde 是什么？
    3. 什么是隐藏文件
    4. 如何创建文件夹，删除文件，删除文件夹，重命名或是移动文件
    
    | 文件操作命令 | 作用                                     |
    |--------------+------------------------------------------|
    | ls           | 查看目录下的文件和文件夹                 |
    | ls -l        | long选项，显示更多的信息                 |
    | ls -a        | 显示隐藏文件和文件夹                     |
    | cd 文件夹    | change dir（切换工作目录）               |
    | cd ..        | 切换到父目录                             |
    | cd           | 不带参数切换到Home目录                   |
    | cd -         | 切换到之前的工作目录                     |
    | pwd          | print work dir（打印当前的工作目录）     |
    | mkdir        | 创建一个目录                             |
    | mkdir -p     | 创建多层目录                             |
    | rm           | remove(删除普通文件）                    |
    | rm -rf       | 删除文件夹及其下面的所有文件             |
    | cp           | copy(拷贝文件)                           |
    | cp -r        | 拷贝文件夹                               |
    | mv           | move重命名文件/文件夹或是移动文件/文件夹 |
    | touch        | 创建一个空文件                           |
    
*** 快捷键
    
    | 按键 | 作用                                      |
    |------+-------------------------------------------|
    | C-a  | 光标移动到行首                            |
    | C-e  | 光标移动到行尾                            |
    | C-f  | 光标右移一个字符                          |
    | C-b  | 光标左移一个字符                          |
    | M-f  | 光标右移一个单词                          |
    | M-b  | 光标左移一个单词                          |
    | C-d  | 删除光标下的字符                          |
    | M-d  | 删除光标右边的单词                        |
    | C-w  | 删除光标左边的单词                        |
    | C-k  | 删除光标右边的所有内容                    |
    | C-u  | 删除整行内容                              |
    | C-p  | 上一条执行的命令                          |
    | C-n  | 下一条执行的命令（需要先执行C-p才可使用） |
    | C-r  | 搜索之前执行的命令                        |

*** 其他重要命令
    1. ~history~
       查看历史命令记录
    2. ~cat~
       查看文本文件内容
    3. ~grep~
       过滤内容

** Mac下的软件管理
*** brew
**** 安装
     [[https://wiki.banyuan.club/pages/viewpage.action?pageId=13700577][参考]]
**** 速度慢---国内镜像修改
     [[https://wiki.banyuan.club/pages/viewpage.action?pageId=13700577][参考]]
**** 常用命令

    | 命令           | 作用               |
    |----------------+--------------------|
    | brew list      | 查看已经安装的软件 |
    | brew install   | 安装软件           |
    | brew uninstall | 卸载软件           |
    | brew search    | 查询可供安装的软件 |

*** 直接下载安装包（dmg文件）
** 编辑器
   选择一个适合你的编辑器

   所有编辑相关的操作都尽量只在编辑器中完成，不需要鼠标和触摸板的操作

   - sublime

     https://www.sublimetext.com/

   - Atom

     https://atom.io/

   - Visual Studio Code （VS-Code）

     https://code.visualstudio.com/

   - vim
   - emacs
     
** 如何做笔记
   https://wiki.banyuan.club/pages/viewpage.action?pageId=3052629
*** 有道云笔记
*** markdown语法
** git
*** ~git~ 的安装
    参看下面的教程：

    https://wiki.banyuan.club/pages/viewpage.action?pageId=13700569

*** ~github~ 的使用
**** 账号申请(github网站操作)

     https://github.com/join

**** 配置 ~ssh-key~ （github网站操作)
       
     配置 ~ssh-key~ 的目的是为了使用 ~ssh~ 方式和 ~github~ 服务器建立连接，这样就不用输入用户名和密码。

     这个步骤的思路是： a. 配置本机的 ~ssh-key~ ； b. 将本机的 ~ssh-key~ 的公钥配置在 ~github~ 上。下面是具体操作：
       
       1. 删除别人的 ~ssh-key~
  	  #+begin_quote	  
	    *注意*

	    如果你明白 ~ssh-key~ 是什么，而且确认这台电脑现在的 ~ssh-key~ 是你自己生成的，请不做这一步操作。
	  #+end_quote
	  #+begin_example
            rm -f ~/.ssh/id_rsa*
	  #+end_example
       2. 打开终端，输入这条命令：
	  #+begin_example
            ssh-keygen -t rsa -b 4096 -C "your_email@example.com"
	  #+end_example
  	  #+begin_quote
	    *注意*
	    - 命令里面双引号的内容修改成你自己的邮箱
	    - 该命令会有提示，一路回车就可以了
	  #+end_quote
       3. 到这里，你本地的 ~ssh-key~ 就创建好了，需要将它放到 ~github~ 上

	  终端里通过 ~cat~ 命令显示 ssh 公钥的内容：

  	  #+begin_example
            cat ~/.ssh/id_rsa.pub
	  #+end_example

	  将下图中框内的内容都复制出来：

	  [[./img/ssh-4.png]]

       4. 使用注册申请好的账号和密码登陆你的 ~github~

       5. 选择你的头像右边的下拉框（在网页的右上方）

	  [[./img/ssh-1.png]]
       6. 选择如下的 ~SSH and GPG keys~

	  [[./img/ssh-2.png]]
	  
       7. 选中右上角的 ~New SSH Key~

	  [[./img/ssh-3.png]]

       8. 将第3)步你复制的内容粘贴进去，再补充一个标题：

	  [[./img/ssh-5.png]]

       9. 最后一步，验证你是否完成了配置
	  #+begin_example
	    ssh -T git@github.com
	  #+end_example
	  如果看到类似下面的 ~successfully~ 什么的，而且把你github的账号打印出来，则表示你成功了
	  #+begin_example
	    linc@pop-os:~/agenda$ ssh -T git@github.com
	    Hi linc5403! You've successfully authenticated, but GitHub does not provide shell access.
	  #+end_example

**** 创建项目（github网站操作）
     
     1. 来到github的首页，并登陆，选择左侧 ~Repositories~ 右边的那个 ~New~:
	
	[[./img/create-1.png]]

     2. 在创建项目的页面填好 ~Repository Name~ ，点击 ~Create repository~ 按钮，项目就创建好了。

	[[./img/create-2.png]]

     3. 在上一步已经在 ~github~ 服务器上创建好了远程项目，接下来需要将它同步到你的本地。

	你们需要重点看下面这张图：

	[[./img/create-3.png]]

**** 项目管理(本机操作)

     项目管理的流程如下：
       #+begin_src plantuml :file ./img/git_flow.svg
	 @startuml
	 start
	 :git clone(远端到本地);
	 repeat
	   :做了一些修改;
	   :git add;
	   :git commit(修改保存到本地);
	   :git push(本地到远端);
	 @enduml

       #+end_src

       #+RESULTS:
       [[file:./img/git_flow.svg]]

       1. ~git clone~
	  ~git clone~ 命令会在当前目录下下载远端的项目,例如：
	  
	  - 先找到 ~git~ 仓库的地址，创建项目的最后一步：

	    [[./img/clone-1.png]]

	  - 使用 ~git clone~ 将它下载下来：
	    
	    #+begin_example
	      git clone git@github.com:linc5403/for_git_demo.git
            #+end_example

	    会将远端 ~for_git_demo.git~ 仓库下载下来，在当前目录下新创建目录名为 ~for_git_demo~ 的目录:

	    [[./img/clone-2.png]]
	    
	    进入 ~for_git_demo~ 目录后，可以看到其中有 ~.git~ 的隐藏文件夹；说明 ~git~ 仓库已经建立好了。
	  
       2. ~git add~

	  当你对本地文件作了修改后，应当使用 ~git add~ 命令将你的变更告知git，此时可以缓存你的变更。

	  让我们在 ~for_git_demo~ 目录中新建一个README.md文件，并将它添加到git中:
	  #+begin_example
	    linc@pop-os:~/for_git_demo$ echo "#this is my first git repo" >> README.md
	    linc@pop-os:~/for_git_demo$ git status
	    On branch master

	    No commits yet

	    Untracked files:
	      (use "git add <file>..." to include in what will be committed)

		    README.md

	    nothing added to commit but untracked files present (use "git add" to track)
	    linc@pop-os:~/for_git_demo$ git add README.md
          #+end_example

       3. ~git commit~
	  当你的变更可以固定下来后，应当使用 ~git commit~ 命令将变更固化下来，同时需要描述此次变更的内容，方便今后快速查找。
	  #+begin_quote
	  *重要*

	    当你还不会使用命令行编辑器的时候，最好使用 ~git commit -m “你想说的话"~ 这种方式来进行提交
	  #+end_quote
	  #+begin_example
	    linc@pop-os:~/for_git_demo$ git commit -m "init repo"
	    [master (root-commit) 2c902a3] init repo
	     1 file changed, 1 insertion(+)
	     create mode 100644 README.md
	  #+end_example
       4. ~git push~
	  将你的本地项目同步到服务器，就不怕工作丢失了。
	  #+begin_example
	    linc@pop-os:~/for_git_demo$ git push
	    Enumerating objects: 3, done.
	    Counting objects: 100% (3/3), done.
	    Writing objects: 100% (3/3), 234 bytes | 234.00 KiB/s, done.
	    Total 3 (delta 0), reused 0 (delta 0)
	    To github.com:linc5403/for_git_demo.git
	     ,* [new branch]      master -> master
	  #+end_example

**** 使用 ~.gitignore~ 来管理哪些文件/文件夹进入 ~git~

*** 注意事项
    1. 确认你的 ~home~ 目录下没有 ~.git~ 文件夹:
       在终端上运行这两条命令：
       #+begin_example
	 cd ~
	 ls -la | grep "\.git"
       #+end_example
       如果有类似下面的回显：
       #+begin_example
	 drwxr-xr-x  8 linc linc  4096 Mar 13 08:29 .git
       #+end_example
       说明你的 ~home~ 目录被上一个同学放到了 ~git~ 中进行管理，请删除这个文件夹：
       #+begin_example
	 rm -rf .git
       #+end_example
    2. 修改自己提交git的用户名和邮箱
       #+begin_example
	 git config --list
       #+end_example
       此时会有类似这样的显示：
       #+begin_example
	 user.name=lin chuan
	 user.email=linch1982@gmail.com
	 core.quotepath=false
       #+end_example
       如果出现的username和email不是你想要的，请使用如下命令进行修改:
       #+begin_example
	 git config --global user.name "你的名字,最好用英文字母"
	 git config --global user.email "你的邮箱地址"
       #+end_example
       #+begin_quote
       *注意* 上面两条 ~config~ 命令中的双引号不要省略
       #+end_quote
    3. 如果你的git命令回显中出现中文的乱码
       使用下面这条命令进行修正：
       #+begin_example
	 git config --global core.quotepath=false
       #+end_example
    4. 你可以随时使用 ~git status~ 命令查看git的状态
       
